version: 2.1

orbs:
  codacy: codacy/base@dev:5.2.0-publishs3orb.5.eeea191

references:
  circleci_job: &circleci_job
    docker:
      - image: circleci/circleci-cli:0.1.5879
    working_directory: ~/workdir

commands:
  run_coverage_reporting:
    description: "Runs the coverage reporting using the mock-server as API"
    parameters:
      executor:
        type: string
      error_code:
        type: integer
        default: 0
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: test coverage reporting
          command: |
            set +e
            export CODACY_PROJECT_TOKEN='TEST_CODACY_PROJECT_TOKEN'
            export TEST_CODACY_REPORT_PATH='integration-tests/test_dotcover.xml'
            export CODACY_REPORTER_TMP_FOLDER=".codacy-coverage"
            export CODACY_REPORTER_VERSION=$(cat .version)
            mkdir -p $CODACY_REPORTER_TMP_FOLDER/$CODACY_REPORTER_VERSION
            cp "$HOME/workdir/artifacts/codacy-coverage-reporter-linux" "$CODACY_REPORTER_TMP_FOLDER/$CODACY_REPORTER_VERSION/codacy-coverage-reporter"
            << parameters.executor >> get.sh report --commit-uuid 'e9bef8a69a439bd601c37c0557277572425203a7' -r $TEST_CODACY_REPORT_PATH --codacy-api-base-url http://localhost:1080
            export ERROR_CODE=$?
            if [ $ERROR_CODE -ne << parameters.error_code >> ]; then echo "expected an error code << parameters.error_code >> and got $ERROR_CODE instead"; exit 1; fi
            echo "test completed with the expected error code: << parameters.error_code >>"

jobs:
  publish_circleci_artifacts:
    machine: true
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/
      - store_artifacts:
          path: ~/workdir/artifacts/

  pack_and_validate_orb:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: Pack orb
          command: |
            echo "" >> orbs/examples/codacy-coverage-report.yml
            echo "  orbs:" >> orbs/examples/codacy-coverage-report.yml
            echo "    coverage-reporter: codacy/coverage-reporter@$(cat .version)" >> orbs/examples/codacy-coverage-report.yml
            circleci config pack orbs > orb.yml
      - run:
          name: Validate orb
          command: circleci orb validate orb.yml
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - "orb.yml"

  publish_dev:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish orb as dev (deleted after 90 days)
          command: circleci orb publish orb.yml codacy/coverage-reporter@dev:$(cat .version) --token $CIRCLE_TOKEN

  publish_prod:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish final orb
          command: circleci orb publish orb.yml codacy/coverage-reporter@$(cat .version) --token $CIRCLE_TOKEN

  package_artifacts:
    docker:
      - image: hairyhenderson/upx:3.94
    working_directory: ~/workdir
    steps:
      - run: apk add ca-certificates
      - attach_workspace:
          at: ~/workdir
      - run: |
          mkdir -p ~/workdir/artifacts/
          mv ~/workdir/tmp-artifacts/codacy-coverage-reporter-assembly-$(cat .version).jar ~/workdir/artifacts/codacy-coverage-reporter-assembly.jar
          upx --lzma -o ~/workdir/artifacts/codacy-coverage-reporter-linux ~/workdir/tmp-artifacts/codacy-coverage-reporter-linux
          # upx binaries don't work on Mac OS Big Sur https://github.com/upx/upx/issues/424
          # use upx again once the bug is fixed
          # upx --lzma -o ~/workdir/artifacts/codacy-coverage-reporter-darwin ~/workdir/tmp-artifacts/codacy-coverage-reporter-darwin
          cp ~/workdir/tmp-artifacts/codacy-coverage-reporter-darwin ~/workdir/artifacts/codacy-coverage-reporter-darwin
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - artifacts/*

  it_coverage_script_alpine:
    docker:
      - image: alpine:3.9.5
      - image: mockserver/mockserver
    working_directory: ~/workdir
    steps:
      - run:
          name: install glibc
          command: |
            apk --no-cache add openssl wget
            wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
            wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-2.31-r0.apk
            apk add glibc-2.31-r0.apk
      - attach_workspace:
          at: ~/workdir
      - run:
          name: wait for mockserver
          command: wget --retry-connrefused --method=PUT http://localhost:1080/mockserver/status
      - run:
          name: configure mock server
          command: wget --method=PUT --body-data="$(cat integration-tests/mock-server-config.json)" http://localhost:1080/mockserver/expectation
      - run_coverage_reporting:
          executor: sh
          error_code: 0

  it_coverage_script_ubuntu:
    docker:
      - image: cimg/base:2020.01 # ubuntu based image
      - image: mockserver/mockserver
    working_directory: ~/workdir
    parameters:
      error_code:
        type: integer
      config_path:
        type: string
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: wait for mockserver
          command: timeout 60 bash -c 'while [[ "$(curl -X PUT -o /dev/null -w ''%{http_code}'' localhost:1080/mockserver/status)" != "200" ]]; do sleep 2; done' || false
      - run:
          name: configure mock server
          command: curl -v -X PUT localhost:1080/mockserver/expectation -d "$(cat << parameters.config_path >>)"
      - run_coverage_reporting:
          executor: bash
          error_code: << parameters.error_code >>

  it_coverage_script_macosx:
    executor: codacy/osx
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: prepare the environment
          command: |
            brew install mockserver coreutils
            export CODACY_REPORTER_TMP_FOLDER=".codacy-coverage"
            version=$(cat .version)
            mkdir -p $CODACY_REPORTER_TMP_FOLDER/$version
            cp $HOME/workdir/artifacts/codacy-coverage-reporter-darwin-$version $CODACY_REPORTER_TMP_FOLDER/$version/codacy-coverage-reporter
      - run:
          name: test on osx
          command: |
            echo "Start and provision the mockserver"
            nohup mockserver -logLevel INFO -serverPort 1080 &
            gtimeout 60 bash -c 'while [[ "$(curl -X PUT -o /dev/null -w ''%{http_code}'' localhost:1080/mockserver/status)" != "200" ]]; do sleep 2; done' || false
            curl -X PUT -d "$(cat integration-tests/mock-server-config.json)" http://localhost:1080/mockserver/expectation

            echo "Run the test"
            set +e

            export CODACY_REPORTER_VERSION=$(cat .version)
            export CODACY_PROJECT_TOKEN='TEST_CODACY_PROJECT_TOKEN'
            export TEST_CODACY_REPORT_PATH='integration-tests/test_dotcover.xml'
            export CODACY_REPORTER_TMP_FOLDER=".codacy-coverage"
            sh get.sh report --commit-uuid 'e9bef8a69a439bd601c37c0557277572425203a7'  -r $TEST_CODACY_REPORT_PATH --codacy-api-base-url http://localhost:1080
            export ERROR_CODE=$?
            if [ $ERROR_CODE -ne 0 ]; then echo "expected an error code 0 and got $ERROR_CODE instead"; exit 1; fi
            echo "test completed with the expected error code: 0"

  build_mkdocs:
    docker:
      - image: circleci/python:3.6.4
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: install dependencies
          command: sudo pip install -r requirements.txt
      - run:
          name: build mkdocs
          command: mkdocs build

workflows:
  version: 2
  compile_test_deploy:
    jobs:
      - codacy/checkout_and_version:
          write_sbt_version: true
      - pack_and_validate_orb:
          context: CodacyCircleCI
          requires:
            - codacy/checkout_and_version
      - build_mkdocs:
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: scalafmt_and_compile
          cmd: sbt "scalafmt::test;test:scalafmt::test;sbt:scalafmt::test;test:compile;it:compile"
          persist_to_workspace: true
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: create_artifacts
          cmd: |
            (cd graalvm; docker build -t graavlm:latest .)
            sbt "assembly;graalvm-native-image:packageBin"
            mkdir -p ~/workdir/tmp-artifacts
            mv target/graalvm-native-image/codacy-coverage-reporter ~/workdir/tmp-artifacts/codacy-coverage-reporter-linux
            mv target/codacy-coverage-reporter-assembly-$(cat .version).jar ~/workdir/tmp-artifacts
          persist_to_workspace: true
          requires:
            - scalafmt_and_compile
      - codacy/sbt_osx:
          name: create_artifacts_for_osx
          cmd: |
            # TODO GraalVM version should be in a single place
            export GRAAL_VERSION=21.0.0
            export TARGET_GRAAL="./target/graalvm-$GRAAL_VERSION.tar.gz"
            mkdir -p target
            if [[ ! -e $TARGET_GRAAL ]]; then
              curl -L "https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-$GRAAL_VERSION/graalvm-ce-java8-darwin-amd64-$GRAAL_VERSION.tar.gz" -o "$TARGET_GRAAL"
            fi
            sudo tar -xf $TARGET_GRAAL -C /Library/Java/JavaVirtualMachines
            /usr/libexec/java_home -V
            export PATH="$PATH:/Library/Java/JavaVirtualMachines/graalvm-ce-java8-$GRAAL_VERSION/Contents/Home/bin"
            sudo gu install native-image
            sbt "set GraalVMNativeImage / containerBuildImage := None; set graalVMNativeImageOptions --= Seq(\"--static\", \"--libc=musl\"); graalvm-native-image:packageBin"
            mkdir -p  ~/workdir/tmp-artifacts
            mv $HOME/workdir/target/graalvm-native-image/codacy-coverage-reporter $HOME/workdir/tmp-artifacts/codacy-coverage-reporter-darwin
          persist_to_workspace: true
          persist_to_workspace_path: "tmp-artifacts/codacy-coverage-reporter-darwin"
          requires:
            - scalafmt_and_compile
      - package_artifacts:
          requires:
            - create_artifacts
            - create_artifacts_for_osx
      - codacy/publish_s3:
          public: true
          path: codacy/binaries/codacy-coverage-reporter
          files: artifacts/codacy-coverage-reporter-linux artifacts/codacy-coverage-reporter-darwin artifacts/codacy-coverage-reporter-assembly.jar
          context: CodacyAWS
          requires:
            - package_artifacts
