version: 2.1

orbs:
  codacy: codacy/base@2.4.1

references:
  circleci_job: &circleci_job
    docker:
      - image: circleci/circleci-cli:0.1.5879
    working_directory: ~/workdir

commands:
  run_coverage_reporting:
    description: "Runs the coverage reporting using the mock-server as API"
    parameters:
      executor:
        type: string
      error_code:
        type: integer
        default: 0
      codacy_tool_path:
        type: string
    steps:
      - run:
          name: test coverage reporting
          command: |
            export CODACY_PROJECT_TOKEN=$TEST_CODACY_PROJECT_TOKEN
            set +e
            mkdir -p .codacy-coverage
            cp "<< parameters.codacy_tool_path >>" ".codacy-coverage"
            << parameters.executor >> get.sh report --commit-uuid $TEST_COMMIT_UUID  -r $TEST_CODACY_REPORT_PATH --codacy-api-base-url http://localhost:1080
            if [ $? -ne << parameters.error_code >> ]; then echo "expected an error code << parameters.error_code >> and got $? instead"; exit 1; fi
            echo "test completed with the expected error code: << parameters.error_code >>"

jobs:
  publish_circleci_artifacts:
    machine: true
    working_directory: ~/workdir
    steps:
      - attach_workspace:
          at: ~/
      - store_artifacts:
          path: ~/workdir/artifacts/

  pack_and_validate:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: Pack orb
          command: |
            echo "" >> orbs/examples/codacy-coverage-report.yml
            echo "  orbs:" >> orbs/examples/codacy-coverage-report.yml
            echo "    coverage-reporter: codacy/coverage-reporter@$(cat .version)" >> orbs/examples/codacy-coverage-report.yml
            circleci config pack orbs > orb.yml
      - run:
          name: Validate orb
          command: circleci orb validate orb.yml
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - "orb.yml"

  publish_dev:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish orb as dev (deleted after 90 days)
          command: circleci orb publish orb.yml codacy/coverage-reporter@dev:$(cat .version) --token $CIRCLE_TOKEN

  publish_prod:
    <<: *circleci_job
    steps:
      - attach_workspace:
          at: ~/workdir
      - deploy:
          name: Publish final orb
          command: circleci orb publish orb.yml codacy/coverage-reporter@$(cat .version) --token $CIRCLE_TOKEN

  package_artifacts:
    docker:
      - image: hairyhenderson/upx:3.94
    working_directory: ~/workdir
    steps:
      - run: apk add ca-certificates
      - attach_workspace:
          at: ~/workdir
      - run: |
          mkdir -p ~/workdir/artifacts/
          mv ~/workdir/target/codacy-coverage-reporter-assembly-$(cat .version).jar ~/workdir/artifacts/
          upx --lzma -o ~/workdir/artifacts/codacy-coverage-reporter-linux-$(cat .version) ~/workdir/target/graalvm-native-image/codacy-coverage-reporter
      - persist_to_workspace:
          root: ~/workdir
          paths:
            - "*"

  it_coverage_script_alpine:
    docker:
      - image: alpine:3.9.5
      - image: mockserver/mockserver
    working_directory: ~/workdir
    steps:
      - run:
          name: install glibc
          command: |
            apk --no-cache add openssl wget
            wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
            wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.31-r0/glibc-2.31-r0.apk
            apk add glibc-2.31-r0.apk
      - attach_workspace:
          at: ~/workdir
      - run:
          name: wait for mockserver
          command: wget --retry-connrefused --method=PUT http://localhost:1080/mockserver/status
      - run:
          name: configure mock server
          command: wget --method=PUT --body-data="$(cat integration-tests/mock-server-config.json)" http://localhost:1080/mockserver/expectation
      - run_coverage_reporting:
          executor: sh
          codacy_tool_path: $TEST_CODACY_TOOL_PATH
          error_code: 0

  it_coverage_script_ubuntu:
    docker:
      - image: cimg/base:2020.01 # ubuntu based image
      - image: mockserver/mockserver
    working_directory: ~/workdir
    parameters:
      error_code:
        type: integer
      config_path:
        type: string
    steps:
      - attach_workspace:
          at: ~/workdir
      - run:
          name: wait for mockserver
          command: timeout 60 bash -c 'while [[ "$(curl -X PUT -o /dev/null -w ''%{http_code}'' localhost:1080/mockserver/status)" != "200" ]]; do sleep 2; done' || false
      - run:
          name: configure mock server
          command: curl -v -X PUT localhost:1080/mockserver/expectation -d "$(cat << parameters.config_path >>)"
      - run_coverage_reporting:
          executor: bash
          codacy_tool_path: $TEST_CODACY_TOOL_PATH
          error_code: << parameters.error_code >>

workflows:
  version: 2
  compile_test_deploy:
    jobs:
      - codacy/checkout_and_version:
          write_sbt_version: true
      - pack_and_validate:
          context: CodacyCircleCI
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: populate_cache
          cmd: sbt "set scalafmtUseIvy in ThisBuild := false;update"
          requires:
            - codacy/checkout_and_version
      - codacy/sbt:
          name: check_fmt
          cmd: sbt "scalafmt::test;test:scalafmt::test;sbt:scalafmt::test"
          requires:
            - populate_cache
      - codacy/sbt:
          name: compile
          cmd: sbt compile
          requires:
            - check_fmt
      - codacy/sbt:
          name: test_and_coverage
          cmd: |
            if [ -z ${CODACY_PROJECT_TOKEN+x} ]; then
              echo "CODACY_PROJECT_TOKEN not found. Skipping send coverage to Codacy."
              sbt test
            else
              sbt clean coverage test coverageReport
              sbt coverageAggregate
              bash <(curl -Ls https://coverage.codacy.com/get.sh) report --skip
              sbt "it:test"
            fi
          requires:
            - compile
      - codacy/sbt:
          name: create_artifacts
          cmd: |
            sbt "assembly;graalvm-native-image:packageBin"
          persist_to_workspace: true
          requires:
            - test_and_coverage
      - it_coverage_script_alpine:
          requires:
            - create_artifacts
      - it_coverage_script_ubuntu:
          name: it_coverage_script_ubuntu_success
          error_code: 0
          config_path: integration-tests/mock-server-config.json
          requires:
            - create_artifacts
      - it_coverage_script_ubuntu:
          name: it_coverage_script_ubuntu_failure
          error_code: 1
          config_path: integration-tests/mock-server-error-config.json
          requires:
            - create_artifacts
      - package_artifacts:
          requires:
            - it_coverage_script_alpine
            - it_coverage_script_ubuntu_success
            - it_coverage_script_ubuntu_failure
      - publish_circleci_artifacts:
          requires:
            - package_artifacts
          filters:
            branches:
              only:
                - master
      #TODO: Add bintray orb
      - codacy/shell:
          name: publish_bintray
          cmd: |
            curl -T ~/workdir/artifacts/codacy-coverage-reporter-linux-$(cat .version) -ucodacy-ci:$BINTRAY_API_KEY -H "X-Bintray-Package:codacy-coverage-reporter" -H "X-Bintray-Version:$(cat .version)" https://api.bintray.com/content/codacy/Binaries/$(cat .version)/codacy-coverage-reporter-linux
            curl -T ~/workdir/artifacts/codacy-coverage-reporter-assembly-$(cat .version).jar -ucodacy-ci:$BINTRAY_API_KEY -H "X-Bintray-Package:codacy-coverage-reporter" -H "X-Bintray-Version:$(cat .version)" https://api.bintray.com/content/codacy/Binaries/$(cat .version)/codacy-coverage-reporter-assembly.jar
            curl -X POST -ucodacy-ci:$BINTRAY_API_KEY https://api.bintray.com/content/codacy/Binaries/codacy-coverage-reporter/$(cat .version)/publish
          filters:
            branches:
              only:
                - master
          context: CodacyBintray
          requires:
            - package_artifacts
      - codacy/publish_ghr:
          name: publish_ghr
          path: ~/workdir/artifacts/
          context: CodacyGitHub
          filters:
            branches:
              only:
                - master
          requires:
            - package_artifacts
      - publish_dev:
          context: CodacyCircleCI
          requires:
            - publish_ghr
            - pack_and_validate
          filters:
            branches:
              ignore:
              - master
      - publish_prod:
          context: CodacyCircleCI
          requires:
            - publish_ghr
            - pack_and_validate
          filters:
            branches:
              only:
                - master
